# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# It's not necessary to copy all keys to your config.
# If the key is missing in your config, "default-config.toml" will serve as a fallback

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands

# format: 0x[AA][RR][GG][BB]
# Reseda green: 0xff646f58
# Dutch white: 0xfff4e4ba
# Thistle pink: 0xffd1bce3
# Columbia blue: 0xffbcd3f2
# Rose quartz: 0xffad9baa

after-startup-command = [
    'exec-and-forget sketchybar',
    'exec-and-forget borders active_color=0xffbcd3f2 inactive_color=0xffad9baa width=3.0',
]

# exec-on-workspace-change = [
#     '/bin/bash', '-c', 'sketchybar --trigger aerospace_workspace_change FOCUSED_WORKSPACE=$AEROSPACE_FOCUSED_WORKSPACE'
# ]

# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 22

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
key-mapping.preset = 'qwerty'


# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
inner.horizontal = 8
inner.vertical = 8
outer.left = 8
outer.bottom = 4
outer.top = 35
outer.right = 8

# See https://nikitabobko.github.io/AeroSpace/guide#exec-env-vars
[exec] # Again, you don't need to copy all config sections to your config.
inherit-env-vars = true # If you don't touch "exec" section,
[exec.env-vars] # it will fallback to "default-config.toml"
PATH = '/opt/homebrew/bin:/opt/homebrew/sbin:${PATH}'

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
[mode.main.binding]

# All possible keys:
# - Letters.        a, b, c, ..., z
# - Numbers.        0, 1, 2, ..., 9
# - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
# - F-keys.         f1, f2, ..., f20
# - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,
#                   leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab
# - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
#                   keypadMinus, keypadMultiply, keypadPlus
# - Arrows.         left, down, up, right

# All possible modifiers: cmd, alt, ctrl, shift

# All possible commands: https://nikitabobko.github.io/AeroSpace/commands

# You can uncomment this line to open up terminal with alt + enter shortcut
# See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
# alt-enter = 'exec-and-forget open -n /System/Applications/Utilities/Terminal.app'
# See: https://nikitabobko.github.io/AeroSpace/commands#layout

# I wouldn't hate you so much if you also UNMINIMIZED the app WHICH IS STILL ACTIVE BTW
cmd-h = []

# Shift focus amongst containers WITHIN focused display
alt-left = 'focus left'
alt-down = 'focus down'
alt-up = 'focus up'
alt-right = 'focus right'

# Move focused container WITHIN focused display
alt-shift-left = 'move left'
alt-shift-down = 'move down'
alt-shift-up = 'move up'
alt-shift-right = 'move right'

alt-shift-minus = 'resize smart -50'
alt-shift-equal = 'resize smart +50'

### convienence mappings
# mapping makes sense if you see my keyboard
alt-esc = 'exec-and-forget sketchybar --bar hidden=toggle'
alt-shift-esc = 'exec-and-forget sketchybar --reload'
# for apps that don't respect window managers
alt-shift-period = 'layout tiling floating'
# could be handy
alt-shift-comma = 'layout accordion tiles'
# applies to both tiles/tiling and accordion
alt-shift-backspace = 'layout horizontal vertical'

# togle which display focus is on
alt-tab = 'workspace-back-and-forth'
# toggle which display workspace is on
alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

# shift focus to...
alt-a = 'workspace A'
alt-b = 'workspace B'
alt-c = 'workspace C'
alt-d = 'workspace D'
alt-e = 'workspace E'
alt-f = 'workspace F'
alt-g = 'workspace G'
alt-i = 'workspace I'
alt-m = 'workspace M'
alt-n = 'workspace N'
alt-o = 'workspace O'
alt-p = 'workspace P'
alt-q = 'workspace Q'
alt-r = 'workspace R'
alt-s = 'workspace S'
alt-t = 'workspace T'
alt-u = 'workspace U'
alt-v = 'workspace V'
alt-w = 'workspace W'
alt-x = 'workspace X'
alt-y = 'workspace Y'
alt-z = 'workspace Z'

# send currently focused container to...
alt-shift-a = 'move-node-to-workspace A'
alt-shift-b = 'move-node-to-workspace B'
alt-shift-c = 'move-node-to-workspace C'
alt-shift-d = 'move-node-to-workspace D'
alt-shift-e = 'move-node-to-workspace E'
alt-shift-f = 'move-node-to-workspace F'
alt-shift-g = 'move-node-to-workspace G'
alt-shift-i = 'move-node-to-workspace I'
alt-shift-m = 'move-node-to-workspace M'
alt-shift-n = 'move-node-to-workspace N'
alt-shift-o = 'move-node-to-workspace O'
alt-shift-p = 'move-node-to-workspace P'
alt-shift-q = 'move-node-to-workspace Q'
alt-shift-r = 'move-node-to-workspace R'
alt-shift-s = 'move-node-to-workspace S'
alt-shift-t = 'move-node-to-workspace T'
alt-shift-u = 'move-node-to-workspace U'
alt-shift-v = 'move-node-to-workspace V'
alt-shift-w = 'move-node-to-workspace W'
alt-shift-x = 'move-node-to-workspace X'
alt-shift-y = 'move-node-to-workspace Y'
alt-shift-z = 'move-node-to-workspace Z'


# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
alt-shift-semicolon = 'mode service'
# tldr: cmds below specific to mode entered via cmd above
[mode.service.binding]
esc = ['reload-config', 'mode main']
r = ['flatten-workspace-tree', 'mode main'] # reset layout
#s = ['layout sticky tiling', 'mode main'] # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
backspace = ['close-all-windows-but-current', 'mode main']

minus = ['resize smart -50', 'mode main']
equal = ['resize smart +50', 'mode main']

# nest window within container to (dir)
left = ['join-with left', 'mode main']
down = ['join-with down', 'mode main']
up = ['join-with up', 'mode main']
right = ['join-with right', 'mode main']


### window detection & management rules

# [B]rowser
[[on-window-detected]]
if.window-title-regex-substring = 'firefox'
run = ['move-node-to-workspace B']

# [E]mail
[[on-window-detected]]
if.window-title-regex-substring = 'spark'
run = ['move-node-to-workspace E']

# [M]essaging
[[on-window-detected]]
if.window-title-regex-substring = 'Texts'
run = ['layout floating', 'move-node-to-workspace M']

[[on-window-detected]]
if.window-title-regex-substring = 'Messages'
run = ['layout floating', 'move-node-to-workspace M']

# [N]oMachine
[[on-window-detected]]
if.window-title-regex-substring = 'NoMachine'
run = ['layout floating', 'move-node-to-workspace N']

# [S]potify
[[on-window-detected]]
if.window-title-regex-substring = 'Spotify'
run = ['move-node-to-workspace S']

# [T]erminal
[[on-window-detected]]
if.app-name-regex-substring = 'WezTerm'
run = ['move-node-to-workspace T']

# [V]SCode
[[on-window-detected]]
if.window-title-regex-substring = 'Code'
run = ['move-node-to-workspace V']

# [F]ile manager(s) and friends
[[on-window-detected]]
if.window-title-regex-substring = 'Finder'
run = ['move-node-to-workspace F']

[[on-window-detected]]
if.window-title-regex-substring = 'Preview'
run = ['move-node-to-workspace F']

[[on-window-detected]]
if.app-name-regex-substring = 'fman'
run = ['move-node-to-workspace F']

[[on-window-detected]]
if.app-name-regex-substring = 'marta'
run = ['move-node-to-workspace F']

# [O]ffice-like apps
[[on-window-detected]]
if.app-name-regex-substring = 'iWork'
run = ['move-node-to-workspace O']

[[on-window-detected]]
if.app-name-regex-substring = 'LibreOffice'
run = ['move-node-to-workspace O']

# [P]roton pass; keep in curr view as presumably something is asking for a password
[[on-window-detected]]
if.app-name-regex-substring = 'Proton'
run = ['layout floating']

[[on-window-detected]]
if.app-name-regex-substring = 'Raycast'
run = ['layout floating']

[[on-window-detected]]
if.app-name-regex-substring = "System Settings"
run = ['layout floating']

# # [D]efault workspace, assumes apps to be contankerous towards window managers
[[on-window-detected]]
check-further-callbacks = true
run = ['layout floating', 'move-node-to-workspace D']
